/* autogenerated by Processing revision 1292 on 2023-04-27 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.serial.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Ceiling_Interface extends PApplet {



Serial DMX_connection; // Serial object for the DMX interface (Arduino Uno + DMX shield with the DMX simple library example "SerialToDMX" installed)

EquipmentButton [] eba; // array of lamp buttons

DimmerButtonGrid dbg;

EquipmentButton currentEnabled = null; // reference variable for the current enabled button

ArrayList<EquipmentButton> combined_list = new ArrayList<EquipmentButton>();

PImage rig;
PFont font_Prime_Regular_48;
PFont font_ArialMT_10;
PFont font_ArialMT_15;

final int MAIN_COL =  color(255,105,204);

boolean usb_error = false;

// Variables for slider sections 

// current selected button (equipment)
SliderSection section_enabled_rgb_spot;
SliderSection section_enabled_flood;

// combined buttons (equipment)
SliderSection section_combined_rgb_spots;
SliderSection section_combined_floods;

// select multiple
EquipmentButton all_exhibition_rgb;
EquipmentButton all_floor_rgb;
EquipmentButton all_floor_flood;

// return states for EB update function
final int ENABLED_STATE = 0; 
final int COMBINE_STATE = 1;
final int TYPE_RGB_SPOT = 0;
final int TYPE_FLOOD = 1;

final int [] alpha_address =   {301, 307, 313, 319, 325, 331, 337, 343}; // alpha channels that needs to be turned up from beginning

public void setup(){
  /* size commented out by preprocessor */;
  PImage icon = loadImage("icon.png");
  surface.setIcon(icon);

  font_Prime_Regular_48 = loadFont("Prime-Regular-48.vlw");
  font_ArialMT_10 = loadFont("ArialMT-10.vlw");
  font_ArialMT_15 = loadFont("ArialMT-15.vlw");
  
  dbg = new DimmerButtonGrid(830+40, 105); // setup dimmer button grid
  
  eba = new EquipmentButton[25];
  
  setupFlood(0, 684, 874, 464, "FL1");
  setupFlood(1, 498, 874, 466, "FL2");
  setupFlood(2, 684, 687, 468, "FL3");
  setupFlood(3, 498, 687, 470, "FL4");
  setupFlood(4, 684, 264, 472, "FL5");
  setupFlood(5, 498, 264, 474, "FL6");
  setupFlood(6, 684, 74, 476, "FL7");
  setupFlood(7, 498, 74, 478, "FL8");
  
  setupRGB(8, 591, 770, 301, "RGB1");
  setupRGB(9, 402, 769, 307, "RGB2");
  setupRGB(10, 591, 580, 313, "RGB3");
  setupRGB(11, 402, 581, 319, "RGB4");
  setupRGB(12, 591, 355, 325, "RGB5");
  setupRGB(13, 402, 355, 331, "RGB6");
  setupRGB(14, 591, 167, 337, "RGB7");
  setupRGB(15, 402, 167, 343, "RGB8");
  
  setupRGBdesire(16, 780, 381, 200, "RGB10");
  setupRGBdesire(17, 780, 425, 205, "RGB11");
  setupRGBdesire(18, 780, 529, 210, "RGB12");
  setupRGBdesire(19, 780, 589, 215, "RGB13");
  setupRGBdesire(20, 780, 651, 220, "RGB14");
  setupRGBdesire(21, 780, 715, 225, "RGB15");
  setupRGBdesire(22, 780, 757, 230, "RGB17");
  setupRGBdesire(23, 780, 801, 235, "RGB18");
  setupRGBdesire(24, 750, 684, 240, "RGB19");
  
  all_exhibition_rgb = new EquipmentButton(930, 413, "exhibition groupe");
  all_exhibition_rgb.setType("flood");
  all_exhibition_rgb.setSize(150, 40);
  all_exhibition_rgb.setFont(font_ArialMT_15);
  
  all_floor_rgb = new EquipmentButton(930, 463, "floor RGB groupe");
  all_floor_rgb.setType("flood");
  all_floor_rgb.setSize(150, 40);
  all_floor_rgb.setFont(font_ArialMT_15);
  
  all_floor_flood = new EquipmentButton(930, 513, "floor Flood groupe");
  all_floor_flood.setType("flood");
  all_floor_flood.setSize(150, 40);
  all_floor_flood.setFont(font_ArialMT_15);

  section_enabled_rgb_spot = new SliderSection(55, 110);
  section_enabled_rgb_spot.addSlider("red");
  section_enabled_rgb_spot.addSlider("green");
  section_enabled_rgb_spot.addSlider("blue");
  
  section_enabled_flood = new SliderSection(55, 110);
  section_enabled_flood.addSlider("warm");
  section_enabled_flood.addSlider("cold");
  
  section_combined_rgb_spots = new SliderSection(55, 315);
  section_combined_rgb_spots.addSlider("red");
  section_combined_rgb_spots.addSlider("green");
  section_combined_rgb_spots.addSlider("blue");
  section_combined_rgb_spots.addSlider("master");
  section_combined_rgb_spots.getChannel("master").value = 255;
  
  section_combined_floods = new SliderSection(55, 575);
  section_combined_floods.addSlider("warm");
  section_combined_floods.addSlider("cold");
  section_combined_floods.addSlider("master");
  section_combined_floods.getChannel("master").value = 255;
  println("just added cold", section_combined_floods.sliders.get(1).channel.name);
  
  // --- CONNECTION TO SERIAL DEVICES ---
  println(Serial.list());
  for (int i = 0; i < Serial.list().length; i++){ // Arduino connected to universe 2
    println(Serial.list()[i]);
      //if (Serial.list()[i].indexOf("/dev/ttyACM0") != -1) {
    if (Serial.list()[i].indexOf("/dev/tty.usbmodem") != -1) {
      println("Serial connection to: ", Serial.list()[i]);
      DMX_connection = new Serial(this, Serial.list()[i], 115200);//230400);
    }
  }
  
  delay(3000); // wait for serial to be ready
  
  // turn up alpha channels
  if (DMX_connection != null){
    for (int i = 0; i < alpha_address.length; i++){
      if (alpha_address[i] != -1) sendDMX(alpha_address[i], 255);
    }
  }
  else {
    println("Serial ERROR: not connected to DMX interface");
    usb_error = true;
  }
  rig = loadImage("rig.png");
  imageMode(CENTER);
}

public void draw(){
  background(0);
  rectMode(CORNER);
  
  drawFrame(855, 70, 284, 304, "Power blocks");
  String label = "Single light";
  if (currentEnabled != null){
    if (currentEnabled.type == TYPE_RGB_SPOT) label += " : RGB Spot";
    else if (currentEnabled.type == TYPE_FLOOD) label += " : Flood";
  }
  drawFrame(40, 70, 284, 185, label);
  label = "Grouped lights : RGB";
  drawFrame(40, 275, 284, 235, label); // 325
  label = "Grouped lights : Flood";
  drawFrame(40, 530, 284, 190, label);
  drawRig(400, 70);
  
  for (int i = 0; i < eba.length; i++){
    eba[i].show(); // show buttons 
  }
  dbg.show(); // show buttons 
  
  if (currentEnabled != null){ // show current enabled slider section
    if (currentEnabled.type == TYPE_RGB_SPOT) section_enabled_rgb_spot.show();
    else if (currentEnabled.type == TYPE_FLOOD) section_enabled_flood.show();
  }
  
  // show the combined slider sections if any buttons are selected for combine
  if (countCombined(TYPE_FLOOD) > 0) {
    section_combined_floods.show();
    println(combined_list.size(), combined_list.get(0).ID);
  }
  if (countCombined(TYPE_RGB_SPOT) > 0) section_combined_rgb_spots.show();
  
  // show combine select by groupe buttons
  all_exhibition_rgb.show();
  all_floor_rgb.show();
  all_floor_flood.show();
  
  if (usb_error) USBError();
}

public void mouseReleased(){
  buttonManager(mouseX, mouseY, mouseButton);
  updateEnabledGUI();
  updateCombinedGUI();
  dbg.update(mouseX, mouseY);
}

public void mouseDragged(){
  updateEnabledGUI();
  updateCombinedGUI();
}

public void keyReleased(){
  sendDMX(313, 255);
}

public void buttonManager(int mouse_x, int mouse_y, int mouse_button){
  
  for (int i = 0; i < eba.length; i++){ // traverse all the buttons in Equipment Button Array (eba)
    
    int result = eba[i].update(mouse_x, mouse_y, mouse_button); // update on the current button
    
    // a enable action (on/off) "left click" was taken on a button
    if (result == ENABLED_STATE) { // this button was clicked
      if (eba[i].enabled_state) { // this button was enabled
        if (currentEnabled != null) currentEnabled.enabled_state = false; // disable previous button, if there is one
        currentEnabled = eba[i]; // set new reference to current button
        if (currentEnabled.type == TYPE_RGB_SPOT) section_enabled_rgb_spot.connectButton(currentEnabled); // connect current button channels to sliders
        else if (currentEnabled.type == TYPE_FLOOD) section_enabled_flood.connectButton(currentEnabled); // connect current button channels to sliders
      }
      else {
        // disconnect might not be needed, but good practice
        if (currentEnabled.type == TYPE_RGB_SPOT) section_enabled_rgb_spot.disconnectButton(); // disconnect current button channels from sliders
        else if (currentEnabled.type == TYPE_FLOOD) section_enabled_flood.disconnectButton(); // disconnect current button channels from sliders
        currentEnabled = null; // button state disabled
      }
    }
    // a combine action (on/off) "right click" was taken on a button
    else if (result == COMBINE_STATE){ // the combine state of this button was changed
      
      if (eba[i].combine_state){ // this button was added to combine
        // add thid button the the combined array list
        addCombined(eba[i]);
      }
      else { // this button was removed from combined
        // remove this button from the combined arraylist
        removeCombined(eba[i]);
      }
      
      // debug - to show the current combined buttons/lamps
      /*println();
      for (int j = 0; j < combined_list.size(); j++){
        println(combined_list.get(j).ID);
      } */
      
    }
  }
  
  // select / deselect a whole groupe
  setCombinedGroupe( (EquipmentButton[]) subset(eba, 0, 8), all_floor_flood);
  setCombinedGroupe( (EquipmentButton[]) subset(eba, 8, 8), all_floor_rgb);
  setCombinedGroupe( (EquipmentButton[]) subset(eba, 16, 9), all_exhibition_rgb);
  
}

public void addCombined(EquipmentButton add_item){
  combined_list.add(add_item);
  
  // update this button/lamp with the combined gui slider data
        if (add_item.type == TYPE_RGB_SPOT) {
          float factor = map(section_combined_rgb_spots.getChannel("master").value, 0, 255, 0, 1);
          for (Slider ss : section_combined_rgb_spots.sliders){
            if (!ss.channel.name.equals("master")) {
              add_item.updateChannel(ss.channel.name, ss.channel.value);
              // send DMX date
              Channel ch = add_item.getChannel(ss.channel.name);
              println("UPDATE combine added", ch.name, ch.address, PApplet.parseInt(ch.value*factor));
              sendDMX(ch.address, PApplet.parseInt(ch.value*factor));
            }
          }
        }
        else if (add_item.type == TYPE_FLOOD) {
          float factor = map(section_combined_floods.getChannel("master").value, 0, 255, 0, 1);
          for (Slider ss : section_combined_floods.sliders){
            if (!ss.channel.name.equals("master")) {
              add_item.updateChannel(ss.channel.name, ss.channel.value);
              // send DMX data
              Channel ch = add_item.getChannel(ss.channel.name);
              println("UPDATE combine added", ch.name, ch.address, PApplet.parseInt(ch.value*factor));
              sendDMX(ch.address, PApplet.parseInt(ch.value*factor));
            }
          }
        }
}

public void removeCombined(EquipmentButton remove_item){
  for (int i = 0; i < combined_list.size(); i++){
    if (combined_list.get(i).ID == remove_item.ID) combined_list.remove(i);
  }
}

public void updateEnabledGUI(){
  
  if (currentEnabled != null){
    Channel ch = null;
    if (currentEnabled.type == TYPE_RGB_SPOT) ch = section_enabled_rgb_spot.update();
    else if (currentEnabled.type == TYPE_FLOOD) ch = section_enabled_flood.update();
    
    if (ch != null) {
      println("UPDATED enable:", ch.name, ch.address, ch.value); // NB: ch will ne 'null' if no sliders where moved - send DMX data out here
      sendDMX(ch.address, ch.value);
    }
  }
}

public void updateCombinedGUI(){
  
  // NB: the reason for having two quite similar sections here is that it is sddressing two different slider sections
  
  if (countCombined(TYPE_RGB_SPOT) > 0){
    Channel combine_ch = null;
    combine_ch = section_combined_rgb_spots.update();
    if (combine_ch != null) { // a rgb spot combined slider was moved
      float factor = map(section_combined_rgb_spots.getChannel("master").value, 0, 255, 0, 1);
      println("master factor", factor);
      boolean isMaster = false;
      if (combine_ch.name.equals("master")) isMaster = true;
      
      for (EquipmentButton eb : combined_list){
        if (eb.type == TYPE_RGB_SPOT) { // FILTER: use only the rgb spots
        
          if(!isMaster){
            eb.updateChannel(combine_ch.name, combine_ch.value);
            Channel ch = eb.getChannel(combine_ch.name); // get the channel altered for this equipment button
            sendDMX(ch.address, PApplet.parseInt(ch.value*factor));
            println("UPDATED combined:", ch.name, ch.address, PApplet.parseInt(ch.value*factor)); // send DMX data out here
          }
          else {
            Channel ch = eb.getChannel("red"); // get the red channel for this equipment button
            sendDMX(ch.address, PApplet.parseInt(ch.value*factor));
            println("UPDATED combined master red:", ch.name, ch.address, PApplet.parseInt(ch.value*factor)); // send DMX data out here
            ch = eb.getChannel("green"); // get the green channel for this equipment button
            sendDMX(ch.address, PApplet.parseInt(ch.value*factor));
            println("UPDATED combined master green:", ch.name, ch.address, PApplet.parseInt(ch.value*factor)); // send DMX data out here
            ch = eb.getChannel("blue"); // get the red channel for this equipment button
            sendDMX(ch.address, PApplet.parseInt(ch.value*factor));
            println("UPDATED combined master blue:", ch.name, ch.address, PApplet.parseInt(ch.value*factor)); // send DMX data out here
          }
        }
      }
    }
  }
  if (countCombined(TYPE_FLOOD) > 0){
    Channel combine_ch = null;
    combine_ch = section_combined_floods.update();
    if (combine_ch != null) { // a rgb spot combined slider was moved
      
      float factor = map(section_combined_floods.getChannel("master").value, 0, 255, 0, 1);
      println("master factor", factor);
      boolean isMaster = false;
      if (combine_ch.name.equals("master")) isMaster = true;
      
      for (EquipmentButton eb : combined_list){
        if (eb.type == TYPE_FLOOD) { // FILTER: use only the floods
          
          if(!isMaster){
            eb.updateChannel(combine_ch.name, combine_ch.value);
            Channel ch = eb.getChannel(combine_ch.name); // get the channel altered for this equipment button 
            println("UPDATED combined:", ch.name, ch.address, PApplet.parseInt(ch.value*factor)); // send DMX data out here
            sendDMX(ch.address, PApplet.parseInt(ch.value*factor));
          }
          else{
            Channel ch = eb.getChannel("warm"); // get the red channel for this equipment button
            sendDMX(ch.address, PApplet.parseInt(ch.value*factor));
            println("UPDATED combined master warm:", ch.name, ch.address, PApplet.parseInt(ch.value*factor)); // send DMX data out here
            ch = eb.getChannel("cold"); // get the green channel for this equipment button
            sendDMX(ch.address, PApplet.parseInt(ch.value*factor));
            println("UPDATED combined master cold:", ch.name, ch.address, PApplet.parseInt(ch.value*factor)); // send DMX data out here
          }
        }
      }
    }
  }
}

public int countCombined(int type){
  int count = 0;
  for (EquipmentButton eb : combined_list){
    if (eb.type == type) count++; 
  }
  return count;
}

// helper function for sendint out the DMX messages via the serial connection
public void sendDMX(int address, int value){
  if (DMX_connection != null) DMX_connection.write(address + "c" + value + "w");
  else println("DMX ERROR : null pointer exception");
  println("DMX", address, value);
}

public void setupFlood(int index, int x, int y, int addr, String id){
  eba[index] = new EquipmentButton(x, y, id);
  eba[index].setType("flood");
  eba[index].addChannel("cold", addr);
  eba[index].addChannel("warm", addr+1);
}

public void setupRGB(int index, int x, int y, int addr, String id){
  eba[index] = new EquipmentButton(x, y, id);
  eba[index].setType("rgb_spot");
  eba[index].addChannel("red", addr+1);
  eba[index].addChannel("green", addr+2);
  eba[index].addChannel("blue", addr+3);
}

public void setupRGBdesire(int index, int x, int y, int addr, String id){
  eba[index] = new EquipmentButton(x, y, id);
  eba[index].setType("rgb_spot");
  eba[index].addChannel("red", addr);
  eba[index].addChannel("green", addr+1);
  eba[index].addChannel("blue", addr+2);
}

public void drawRig(int x, int y){
  
  fill(255,105,204);
  noStroke();
  int w = 7;
  int l = 383;
  
  textFont(font_Prime_Regular_48);
  textSize(38);
  textAlign(CENTER, BOTTOM);
  text("Atrium", x+l/2-w/2, y-2);
  
  rect(x, y, w, l);
  rect(x+l/2-w/2, y, w, l);
  rect(x+l-w, y, w, l);
  
  rect(x, y, l, w);
  rect(x, y+l/2-w/2, l, w);
  rect(x, y+376, l, w);
  
  y += 421; 
  rect(x, y, w, l);
  rect(x+l/2-w/2, y, w, l);
  rect(x+l-w, y, w, l);
  
  rect(x, y, l, w);
  rect(x, y+l/2-w/2, l, w);
  rect(x, y+376, l, w);
  
  textAlign(CENTER, TOP);
  text("Window", x+l/2-w/2+5, y+l+10);
  
}


public void drawFrame(int x, int y, int w, int h, String label){
  rectMode(CORNER);
  stroke(MAIN_COL);
  strokeWeight(2);
  fill(0);  
  rect(x, y, w, h);
  fill(MAIN_COL);
  textFont(font_ArialMT_15);
  textSize(12);
  textAlign(LEFT, TOP);
  text(label, x+15, y+13);
}

public void setCombinedGroupe(EquipmentButton [] eb_array, EquipmentButton trigger_button){
  // select exhibition RGB groupe
  int result = trigger_button.update(mouseX, mouseY, LEFT);
  if (result == 0){
    if (trigger_button.enabled_state) {
      for (int i = 0; i < eb_array.length; i++) {
        if (!hasCombined(eb_array[i].ID)) {
          addCombined(eb_array[i]);
          eb_array[i].combine_state = true;
        }
      }
    }
    else {
      for (int i = 0; i < eb_array.length; i++) {
        removeCombined(eb_array[i]);
        eb_array[i].combine_state = false;
      }
    }
  }
}

public boolean hasCombined(String ID){
  
  for (EquipmentButton eb : combined_list){
    if (eb.ID.equals(ID)) return true;
  }
  return false;
}

public void USBError(){
  background(0);
  fill(255,0,0);
  textFont(font_Prime_Regular_48);
  textAlign (CENTER, CENTER);
  text("DMX USB interface not connected", width/2, height/2);
  noLoop();
}
class Channel{
  String name;
  int address;
  int value;
  
  Channel(String name_, int address_){
    name = name_;
    address = address_;
  }
  
}
class DimmerButtonGrid {
  EquipmentButton [] dba; // array of dimmer buttons
  
  int s = 66; // space
  int x; // global x
  int y; //global y
  final int BUTTON_SIZE = 56;
  final int main_col =  color(255,105,204);
  
  DimmerButtonGrid (int x, int y){
    x = x + BUTTON_SIZE/2; // global x
  
    y = y + BUTTON_SIZE/2; // global y
    
    dba = new EquipmentButton[16];
    
    // colum 1
    setupDimmButton(0, x, y, 432, "O1\n(Floods)");
    setupDimmButton(1, x+s, y, 433, "O2");
    setupDimmButton(2, x+s*2, y, 434, "O3");
    setupDimmButton(3, x+s*3, y, 435, "O4");
    // colum 2
    setupDimmButton(4, x, y+s, 436, "O5");
    setupDimmButton(5, x+s, y+s, 437, "O6");
    setupDimmButton(6, x+s*2, y+s, 438, "O7");
    setupDimmButton(7, x+s*3, y+s, 439, "O8");
    // colum 3
    setupDimmButton(8, x, y+s*2, 440, "O9\n(Kinect)");
    setupDimmButton(9, x+s, y+s*2, 441, "O10");
    setupDimmButton(10, x+s*2, y+s*2, 442, "O11");
    setupDimmButton(11, x+s*3, y+s*2, 443, "O12");
    // colum 3
    setupDimmButton(12, x, y+s*3, 444, "O13\n(Floods)");
    setupDimmButton(13, x+s, y+s*3, 445, "O14");
    setupDimmButton(14, x+s*2, y+s*3, 446, "O15");
    setupDimmButton(15, x+s*3, y+s*3, 447, "O16");
    
  }
  
  
  public void update(int xPos, int yPos){
    
    for (int i = 0; i < dba.length; i++){
      if (dba[i].update(xPos, yPos, LEFT) == 0){ // a change was made
        sendDMX(dba[i].getChannel("dimm").address, 255*PApplet.parseInt(dba[i].enabled_state));
      }
    }
  }
  
  public void show(){
    for (int i = 0; i < dba.length; i++){
      dba[i].show();
    }
  }
  
  public void setupDimmButton(int index, int x, int y, int addr, String id){
    dba[index] = new EquipmentButton(x, y, id);
    dba[index].setType("dimm");
    dba[index].addChannel("dimm", addr);
    dba[index].setSize(BUTTON_SIZE, BUTTON_SIZE);
  }
}
class EquipmentButton{
  int type = 0; // type 0=rgb spot , type 1=flood
  int x, y;
  //int size;
  int w, h, d;
  int main_col, second_col;
  boolean enabled_state;
  boolean combine_state;
  String ID;
  ArrayList <Channel> channels = new ArrayList<Channel>();
  PFont font;
  
  EquipmentButton(int x_, int y_, String ID_){
    x = x_;
    y = y_;
    setSize(40, 40);
    setSize(40);
    main_col = color(255,105,204);
    second_col = color(255, 255, 0);
    ID = ID_;
    font = loadFont("ArialMT-10.vlw");
  }
  
  public int update(int xPos, int yPos, int mouse_button){
    if (isOver(xPos, yPos)) {    
      if (mouse_button == LEFT) {
        enabled_state = ! enabled_state;
        return 0; // a change was made
      }
      else if (mouse_button == RIGHT) {
        combine_state = ! combine_state;
        return 1; // a change was made
      }
    }
    return -1; // no changes made
  }
  
  public void show(){
    strokeWeight(1);
    if (enabled_state) fill(main_col);
    else fill(0);//noFill();
    
    if (combine_state) stroke(second_col);
    else stroke(main_col);
      
    if (type == 1) {  
      rectMode(CENTER);
      rect(x, y, w, h); 
    }
    else if (type == 0){  
      ellipse(x, y, d, d);
    }
    
    
    if (enabled_state) fill(0);
    else fill(main_col);
    //textSize(10);
    textAlign(CENTER, CENTER);
    textFont(font);
    text(ID, x, y);
  
  }
  
  public boolean isOver(int xPos, int yPos){
    if (type == 1 && xPos > x-w/2 && xPos < x-w/2+w && yPos > y-h/2 && yPos < y-h/2+h) return true; // square
    else if (type == 0 && dist(xPos, yPos, x, y) < d/2) return true; // circle
    else return false;
  }
  
  public void setType(String type_){
    if (type_.equals("flood")) type = 1;
    else if (type_.equals("rgb_spot")) type = 0;
    else if (type_.equals("dimm")) type = 1;
  }
  
  public void addChannel(String ch_name, int address_){
    channels.add(new Channel(ch_name, address_));
  }
  
  public Channel getChannel(String ch_name){
    for (int i = 0; i < channels.size(); i++){
      if (channels.get(i).name.equals(ch_name)) return channels.get(i);
    }
    return null;
  }
  
  public void updateChannel(String ch_name, int val){
    println(ch_name, val, "type:", type);
    getChannel(ch_name).value = val;
  }
  
  public void setSize(int w_, int h_){
    w = w_;
    h = h_;
  }
  
  public void setSize(int d_){
    d = d_;
    
  }
  
  public void setFont(PFont font_){
    font = font_;
  }
}
class Slider{

  int x, y;
  int w = 255;
  int h = 20;
  int min, max;
  //int val, 
  int last_val;
  Channel channel;
  
  String label;
  
  int col = color(255,105,204);

  
  Slider(int x_, int y_, String label_){
    x = x_;
    y = y_;
    max = 255;
    label = label_;
    channel = new Channel (label_, 999);
  }
  
  public boolean update(){
    
    if (mouseX >= x && mouseX <= x+w && mouseY > y && mouseY < y + h){ 
      channel.value = PApplet.parseInt(map (mouseX, x, x + w, min, max));
        if (channel.value != last_val) {
          last_val = channel.value;
          return true;
      }
    }
    return false;
  }
  
  public boolean setValue(int val_){
    int old_val = channel.value;
    channel.value = val_;
    if (old_val == channel.value) return false;
    return true;
  }
  
    public void show(){
    rectMode(CORNER);
    textAlign(LEFT, BASELINE);
    noFill();
    strokeWeight(1);
    stroke(col);
    rect(x, y, w, h);
    fill(col);
    rect(x, y, map(channel.value, min, max, 0, w), h);
    text(label, x, y-5);
  
  }
  
}
class SliderSection{
  
  int x, y;
  ArrayList <Slider> sliders;
  
  SliderSection(int x_, int y_){
    x = x_;
    y = y_;
    sliders = new ArrayList<Slider>();
  }
  
  public Channel update(){
    for (Slider sl : sliders){
      if (sl.update()) return sl.channel;
    }
    return null;
  }
  
  public void addSlider(String label_){
    Slider s = new Slider(x, y+10+sliders.size()*50, label_);
    sliders.add(s);
  }
  
  public void show(){
    for (Slider sl : sliders){
      sl.show();
    }
  }
  
  public void connectButton(EquipmentButton eb){
    for (Slider s : sliders){
      s.channel = eb.getChannel(s.label);  
    }
  }
  
  public void disconnectButton(){
    for (Slider s : sliders){
      s.channel = null;  
    }
  }
  
  
  public Channel getChannel(String ch_name){
    for (int i = 0; i < sliders.size(); i++){
      if (sliders.get(i).channel.name.equals(ch_name)) return sliders.get(i).channel;
    }
    return null;
  }
  
}


  public void settings() { size(1179, 940); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Ceiling_Interface" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
